/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef rpc_measurement_TYPES_H
#define rpc_measurement_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>




class ComplexDataStructure;

typedef struct _ComplexDataStructure__isset {
  _ComplexDataStructure__isset() : val1(false), val2(false), val3(false) {}
  bool val1 :1;
  bool val2 :1;
  bool val3 :1;
} _ComplexDataStructure__isset;

class ComplexDataStructure : public virtual ::apache::thrift::TBase {
 public:

  ComplexDataStructure(const ComplexDataStructure&);
  ComplexDataStructure& operator=(const ComplexDataStructure&);
  ComplexDataStructure() noexcept
                       : val1(0),
                         val2(0),
                         val3() {
  }

  virtual ~ComplexDataStructure() noexcept;
  int32_t val1;
  double val2;
  std::string val3;

  _ComplexDataStructure__isset __isset;

  void __set_val1(const int32_t val);

  void __set_val2(const double val);

  void __set_val3(const std::string& val);

  bool operator == (const ComplexDataStructure & rhs) const
  {
    if (!(val1 == rhs.val1))
      return false;
    if (!(val2 == rhs.val2))
      return false;
    if (!(val3 == rhs.val3))
      return false;
    return true;
  }
  bool operator != (const ComplexDataStructure &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ComplexDataStructure & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ComplexDataStructure &a, ComplexDataStructure &b);

std::ostream& operator<<(std::ostream& out, const ComplexDataStructure& obj);



#endif
