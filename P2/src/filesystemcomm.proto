syntax = "proto3";

package filesystemcomm;

service FileSystemService 
{
    rpc Ping (PingMessage) returns (PingMessage) {}
    
    // BASIC
    // File operations
    rpc Fetch (FetchRequest) returns (FetchResponse) {}
    rpc Store (StoreRequest) returns (StoreResponse) {}
    rpc Remove (RemoveRequest) returns (RemoveResponse) {}
    rpc Rename (RenameRequest) returns (RenameResponse) {}
    rpc Mknod (MknodRequest) returns (MknodResponse) {}
    
    // Metadata operations
    rpc GetFileStat (GetFileStatRequest) returns (GetFileStatResponse) {}
    rpc TestAuth (TestAuthRequest) returns (TestAuthResponse) {}
    
    // Directory operations
    rpc MakeDir (MakeDirRequest) returns (MakeDirResponse) {}
    rpc RemoveDir (RemoveDirRequest) returns (RemoveDirResponse) {}
    rpc ReadDir (ListDirRequest) returns (ListDirResponse) {}

    // PERFORMANCE
    // File operations
    rpc FetchWithStream (FetchRequest) returns (stream FetchResponse) {}
    rpc StoreWithStream (stream StoreRequest) returns (StoreResponse) {}

    // ASYNC
    // File operations
    //rpc FetchAsync (FetchRequest) returns (FetchResponse) {}
    //rpc StoreAsync (StoreRequest) returns (StoreResponse) {}
    //rpc RemoveAsync (RemoveRequest) returns (RemoveResponse) {}
    //rpc RenameAsync (RenameRequest) returns (RenameResponse) {}
    //rpc MknodAsync (MknodRequest) returns (MknodResponse) {}
    
    // Metadata operations
    //rpc GetFileStatAsync (GetFileStatRequest) returns (GetFileStatResponse) {}
    //rpc TestAuthAsync (TestAuthRequest) returns (TestAuthResponse) {}
    
    // Directory operations
    //rpc MakeDirAsync (MakeDirRequest) returns (MakeDirResponse) {}
    //rpc RemoveDirAsync (RemoveDirRequest) returns (RemoveDirResponse) {}
    //rpc ReadDirAsync (ListDirRequest) returns (ListDirResponse) {}
}


// Modeled on chrono::timespec
// see https://en.cppreference.com/w/c/chrono/timespec
message Timestamp
{
    int64 sec = 1;
    uint32 nsec = 2;
}

enum FileMode {
    UNSUPPORTED = 0;
    REG = 1;
    DIR = 2;
}


message FileStat
{
    uint32   dev = 1;    
    uint32   ino = 2;
    int32   mode = 3;  
    uint32   nlink = 4;    
    uint32     uid = 5;     
    uint32     gid = 6;     
    sint64     size = 7;    
    sint64 blksize = 8; 
    sint64  blocks = 9;  
    int32    atime = 10;   
    int32    mtime = 11;   
    int32    ctime = 12; 
}

message DirectoryEntry {
    string file_name = 1;
    FileMode mode = 2;
    uint64 size = 3; // in bytes
}

message PingMessage { }

message FetchRequest
{
    string pathname = 1;
}
message FetchResponse
{
    uint32 fs_errno = 1;
    bytes file_contents = 2;
    Timestamp time_modify = 3;
}

message MknodRequest
{
    string pathname = 1;
    uint32 mode = 2;
    uint32 dev = 3;
}

message MknodResponse
{
    uint32 fs_errno = 1;
}


message StoreRequest
{
    string pathname = 1;
    bytes file_contents = 2;
}
message StoreResponse
{
    uint32 fs_errno = 1;
    Timestamp time_modify = 2; // this isn't in ITC DFS protocol, but is included for use in TestAuth
}



message RemoveRequest 
{
    string pathname = 1;
}
message RemoveResponse
{
    uint32 fs_errno = 1;
}



message GetFileStatRequest
{
    string pathname = 1;
    // ITC DFS protocol includes a LINK parameter, but we do not support links
}
message GetFileStatResponse
{
    uint32 fs_errno = 1;
    FileStat status = 2;
}


message TestAuthRequest
{
    string pathname = 1;
    Timestamp time_modify = 2;
}
message TestAuthResponse
{
    // note: TestAuth never returns a filesystem error;
    // any such error is transformed to has_changed=true.
    bool has_changed = 1;
}


message MakeDirRequest
{
    string pathname = 1;
    int32 mode = 2;
}
message MakeDirResponse
{
    uint32 fs_errno = 1;
}


message RemoveDirRequest
{
    string pathname = 1;
}
message RemoveDirResponse
{
    uint32 fs_errno = 1;
}

message ListDirRequest
{
    string pathname = 1;
}
message ListDirResponse
{
    uint32 fs_errno = 1;
    repeated DirectoryEntry entries = 2;
}


message RenameRequest
{
    string pathname = 1;      // old file path, e.g. `/home/guest/data/first.txt`
    string componentname = 2; // new file name, e.g. `second.txt` (within same directory)
}
message RenameResponse
{
    uint32 fs_errno = 1;
}
