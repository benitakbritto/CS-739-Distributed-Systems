// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: filesystemcomm.proto
#ifndef GRPC_filesystemcomm_2eproto__INCLUDED
#define GRPC_filesystemcomm_2eproto__INCLUDED

#include "filesystemcomm.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace filesystemcomm {

class FileSystemService final {
 public:
  static constexpr char const* service_full_name() {
    return "filesystemcomm.FileSystemService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // File Operations
    virtual ::grpc::Status OpenFile(::grpc::ClientContext* context, const ::filesystemcomm::OpenFileRequest& request, ::filesystemcomm::OpenFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::OpenFileResponse>> AsyncOpenFile(::grpc::ClientContext* context, const ::filesystemcomm::OpenFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::OpenFileResponse>>(AsyncOpenFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::OpenFileResponse>> PrepareAsyncOpenFile(::grpc::ClientContext* context, const ::filesystemcomm::OpenFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::OpenFileResponse>>(PrepareAsyncOpenFileRaw(context, request, cq));
    }
    virtual ::grpc::Status CloseFile(::grpc::ClientContext* context, const ::filesystemcomm::CloseFileRequest& request, ::filesystemcomm::CloseFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::CloseFileResponse>> AsyncCloseFile(::grpc::ClientContext* context, const ::filesystemcomm::CloseFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::CloseFileResponse>>(AsyncCloseFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::CloseFileResponse>> PrepareAsyncCloseFile(::grpc::ClientContext* context, const ::filesystemcomm::CloseFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::CloseFileResponse>>(PrepareAsyncCloseFileRaw(context, request, cq));
    }
    virtual ::grpc::Status ReadFile(::grpc::ClientContext* context, const ::filesystemcomm::ReadFileRequest& request, ::filesystemcomm::ReadFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::ReadFileResponse>> AsyncReadFile(::grpc::ClientContext* context, const ::filesystemcomm::ReadFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::ReadFileResponse>>(AsyncReadFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::ReadFileResponse>> PrepareAsyncReadFile(::grpc::ClientContext* context, const ::filesystemcomm::ReadFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::ReadFileResponse>>(PrepareAsyncReadFileRaw(context, request, cq));
    }
    virtual ::grpc::Status WriteFile(::grpc::ClientContext* context, const ::filesystemcomm::WriteFileRequest& request, ::filesystemcomm::WriteFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::WriteFileResponse>> AsyncWriteFile(::grpc::ClientContext* context, const ::filesystemcomm::WriteFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::WriteFileResponse>>(AsyncWriteFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::WriteFileResponse>> PrepareAsyncWriteFile(::grpc::ClientContext* context, const ::filesystemcomm::WriteFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::WriteFileResponse>>(PrepareAsyncWriteFileRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateFile(::grpc::ClientContext* context, const ::filesystemcomm::CreateFileRequest& request, ::filesystemcomm::CreateFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::CreateFileResponse>> AsyncCreateFile(::grpc::ClientContext* context, const ::filesystemcomm::CreateFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::CreateFileResponse>>(AsyncCreateFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::CreateFileResponse>> PrepareAsyncCreateFile(::grpc::ClientContext* context, const ::filesystemcomm::CreateFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::CreateFileResponse>>(PrepareAsyncCreateFileRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteFile(::grpc::ClientContext* context, const ::filesystemcomm::DeleteFileRequest& request, ::filesystemcomm::DeleteFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::DeleteFileResponse>> AsyncDeleteFile(::grpc::ClientContext* context, const ::filesystemcomm::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::DeleteFileResponse>>(AsyncDeleteFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::DeleteFileResponse>> PrepareAsyncDeleteFile(::grpc::ClientContext* context, const ::filesystemcomm::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::DeleteFileResponse>>(PrepareAsyncDeleteFileRaw(context, request, cq));
    }
    virtual ::grpc::Status GetFileStat(::grpc::ClientContext* context, const ::filesystemcomm::GetFileStatRequest& request, ::filesystemcomm::GetFileStatResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::GetFileStatResponse>> AsyncGetFileStat(::grpc::ClientContext* context, const ::filesystemcomm::GetFileStatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::GetFileStatResponse>>(AsyncGetFileStatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::GetFileStatResponse>> PrepareAsyncGetFileStat(::grpc::ClientContext* context, const ::filesystemcomm::GetFileStatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::GetFileStatResponse>>(PrepareAsyncGetFileStatRaw(context, request, cq));
    }
    // Dir Operations
    virtual ::grpc::Status MakeDir(::grpc::ClientContext* context, const ::filesystemcomm::MakeDirRequest& request, ::filesystemcomm::MakeDirResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::MakeDirResponse>> AsyncMakeDir(::grpc::ClientContext* context, const ::filesystemcomm::MakeDirRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::MakeDirResponse>>(AsyncMakeDirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::MakeDirResponse>> PrepareAsyncMakeDir(::grpc::ClientContext* context, const ::filesystemcomm::MakeDirRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::MakeDirResponse>>(PrepareAsyncMakeDirRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteDir(::grpc::ClientContext* context, const ::filesystemcomm::DeleteDirRequest& request, ::filesystemcomm::DeleteDirResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::DeleteDirResponse>> AsyncDeleteDir(::grpc::ClientContext* context, const ::filesystemcomm::DeleteDirRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::DeleteDirResponse>>(AsyncDeleteDirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::DeleteDirResponse>> PrepareAsyncDeleteDir(::grpc::ClientContext* context, const ::filesystemcomm::DeleteDirRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::DeleteDirResponse>>(PrepareAsyncDeleteDirRaw(context, request, cq));
    }
    virtual ::grpc::Status ListDir(::grpc::ClientContext* context, const ::filesystemcomm::ListDirRequest& request, ::filesystemcomm::ListDirResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::ListDirResponse>> AsyncListDir(::grpc::ClientContext* context, const ::filesystemcomm::ListDirRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::ListDirResponse>>(AsyncListDirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::ListDirResponse>> PrepareAsyncListDir(::grpc::ClientContext* context, const ::filesystemcomm::ListDirRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::ListDirResponse>>(PrepareAsyncListDirRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // File Operations
      virtual void OpenFile(::grpc::ClientContext* context, const ::filesystemcomm::OpenFileRequest* request, ::filesystemcomm::OpenFileResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OpenFile(::grpc::ClientContext* context, const ::filesystemcomm::OpenFileRequest* request, ::filesystemcomm::OpenFileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CloseFile(::grpc::ClientContext* context, const ::filesystemcomm::CloseFileRequest* request, ::filesystemcomm::CloseFileResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CloseFile(::grpc::ClientContext* context, const ::filesystemcomm::CloseFileRequest* request, ::filesystemcomm::CloseFileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReadFile(::grpc::ClientContext* context, const ::filesystemcomm::ReadFileRequest* request, ::filesystemcomm::ReadFileResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReadFile(::grpc::ClientContext* context, const ::filesystemcomm::ReadFileRequest* request, ::filesystemcomm::ReadFileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void WriteFile(::grpc::ClientContext* context, const ::filesystemcomm::WriteFileRequest* request, ::filesystemcomm::WriteFileResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void WriteFile(::grpc::ClientContext* context, const ::filesystemcomm::WriteFileRequest* request, ::filesystemcomm::WriteFileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CreateFile(::grpc::ClientContext* context, const ::filesystemcomm::CreateFileRequest* request, ::filesystemcomm::CreateFileResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateFile(::grpc::ClientContext* context, const ::filesystemcomm::CreateFileRequest* request, ::filesystemcomm::CreateFileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteFile(::grpc::ClientContext* context, const ::filesystemcomm::DeleteFileRequest* request, ::filesystemcomm::DeleteFileResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteFile(::grpc::ClientContext* context, const ::filesystemcomm::DeleteFileRequest* request, ::filesystemcomm::DeleteFileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetFileStat(::grpc::ClientContext* context, const ::filesystemcomm::GetFileStatRequest* request, ::filesystemcomm::GetFileStatResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetFileStat(::grpc::ClientContext* context, const ::filesystemcomm::GetFileStatRequest* request, ::filesystemcomm::GetFileStatResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Dir Operations
      virtual void MakeDir(::grpc::ClientContext* context, const ::filesystemcomm::MakeDirRequest* request, ::filesystemcomm::MakeDirResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MakeDir(::grpc::ClientContext* context, const ::filesystemcomm::MakeDirRequest* request, ::filesystemcomm::MakeDirResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteDir(::grpc::ClientContext* context, const ::filesystemcomm::DeleteDirRequest* request, ::filesystemcomm::DeleteDirResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteDir(::grpc::ClientContext* context, const ::filesystemcomm::DeleteDirRequest* request, ::filesystemcomm::DeleteDirResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListDir(::grpc::ClientContext* context, const ::filesystemcomm::ListDirRequest* request, ::filesystemcomm::ListDirResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListDir(::grpc::ClientContext* context, const ::filesystemcomm::ListDirRequest* request, ::filesystemcomm::ListDirResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::OpenFileResponse>* AsyncOpenFileRaw(::grpc::ClientContext* context, const ::filesystemcomm::OpenFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::OpenFileResponse>* PrepareAsyncOpenFileRaw(::grpc::ClientContext* context, const ::filesystemcomm::OpenFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::CloseFileResponse>* AsyncCloseFileRaw(::grpc::ClientContext* context, const ::filesystemcomm::CloseFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::CloseFileResponse>* PrepareAsyncCloseFileRaw(::grpc::ClientContext* context, const ::filesystemcomm::CloseFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::ReadFileResponse>* AsyncReadFileRaw(::grpc::ClientContext* context, const ::filesystemcomm::ReadFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::ReadFileResponse>* PrepareAsyncReadFileRaw(::grpc::ClientContext* context, const ::filesystemcomm::ReadFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::WriteFileResponse>* AsyncWriteFileRaw(::grpc::ClientContext* context, const ::filesystemcomm::WriteFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::WriteFileResponse>* PrepareAsyncWriteFileRaw(::grpc::ClientContext* context, const ::filesystemcomm::WriteFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::CreateFileResponse>* AsyncCreateFileRaw(::grpc::ClientContext* context, const ::filesystemcomm::CreateFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::CreateFileResponse>* PrepareAsyncCreateFileRaw(::grpc::ClientContext* context, const ::filesystemcomm::CreateFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::DeleteFileResponse>* AsyncDeleteFileRaw(::grpc::ClientContext* context, const ::filesystemcomm::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::DeleteFileResponse>* PrepareAsyncDeleteFileRaw(::grpc::ClientContext* context, const ::filesystemcomm::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::GetFileStatResponse>* AsyncGetFileStatRaw(::grpc::ClientContext* context, const ::filesystemcomm::GetFileStatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::GetFileStatResponse>* PrepareAsyncGetFileStatRaw(::grpc::ClientContext* context, const ::filesystemcomm::GetFileStatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::MakeDirResponse>* AsyncMakeDirRaw(::grpc::ClientContext* context, const ::filesystemcomm::MakeDirRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::MakeDirResponse>* PrepareAsyncMakeDirRaw(::grpc::ClientContext* context, const ::filesystemcomm::MakeDirRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::DeleteDirResponse>* AsyncDeleteDirRaw(::grpc::ClientContext* context, const ::filesystemcomm::DeleteDirRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::DeleteDirResponse>* PrepareAsyncDeleteDirRaw(::grpc::ClientContext* context, const ::filesystemcomm::DeleteDirRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::ListDirResponse>* AsyncListDirRaw(::grpc::ClientContext* context, const ::filesystemcomm::ListDirRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::filesystemcomm::ListDirResponse>* PrepareAsyncListDirRaw(::grpc::ClientContext* context, const ::filesystemcomm::ListDirRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status OpenFile(::grpc::ClientContext* context, const ::filesystemcomm::OpenFileRequest& request, ::filesystemcomm::OpenFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filesystemcomm::OpenFileResponse>> AsyncOpenFile(::grpc::ClientContext* context, const ::filesystemcomm::OpenFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filesystemcomm::OpenFileResponse>>(AsyncOpenFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filesystemcomm::OpenFileResponse>> PrepareAsyncOpenFile(::grpc::ClientContext* context, const ::filesystemcomm::OpenFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filesystemcomm::OpenFileResponse>>(PrepareAsyncOpenFileRaw(context, request, cq));
    }
    ::grpc::Status CloseFile(::grpc::ClientContext* context, const ::filesystemcomm::CloseFileRequest& request, ::filesystemcomm::CloseFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filesystemcomm::CloseFileResponse>> AsyncCloseFile(::grpc::ClientContext* context, const ::filesystemcomm::CloseFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filesystemcomm::CloseFileResponse>>(AsyncCloseFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filesystemcomm::CloseFileResponse>> PrepareAsyncCloseFile(::grpc::ClientContext* context, const ::filesystemcomm::CloseFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filesystemcomm::CloseFileResponse>>(PrepareAsyncCloseFileRaw(context, request, cq));
    }
    ::grpc::Status ReadFile(::grpc::ClientContext* context, const ::filesystemcomm::ReadFileRequest& request, ::filesystemcomm::ReadFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filesystemcomm::ReadFileResponse>> AsyncReadFile(::grpc::ClientContext* context, const ::filesystemcomm::ReadFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filesystemcomm::ReadFileResponse>>(AsyncReadFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filesystemcomm::ReadFileResponse>> PrepareAsyncReadFile(::grpc::ClientContext* context, const ::filesystemcomm::ReadFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filesystemcomm::ReadFileResponse>>(PrepareAsyncReadFileRaw(context, request, cq));
    }
    ::grpc::Status WriteFile(::grpc::ClientContext* context, const ::filesystemcomm::WriteFileRequest& request, ::filesystemcomm::WriteFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filesystemcomm::WriteFileResponse>> AsyncWriteFile(::grpc::ClientContext* context, const ::filesystemcomm::WriteFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filesystemcomm::WriteFileResponse>>(AsyncWriteFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filesystemcomm::WriteFileResponse>> PrepareAsyncWriteFile(::grpc::ClientContext* context, const ::filesystemcomm::WriteFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filesystemcomm::WriteFileResponse>>(PrepareAsyncWriteFileRaw(context, request, cq));
    }
    ::grpc::Status CreateFile(::grpc::ClientContext* context, const ::filesystemcomm::CreateFileRequest& request, ::filesystemcomm::CreateFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filesystemcomm::CreateFileResponse>> AsyncCreateFile(::grpc::ClientContext* context, const ::filesystemcomm::CreateFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filesystemcomm::CreateFileResponse>>(AsyncCreateFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filesystemcomm::CreateFileResponse>> PrepareAsyncCreateFile(::grpc::ClientContext* context, const ::filesystemcomm::CreateFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filesystemcomm::CreateFileResponse>>(PrepareAsyncCreateFileRaw(context, request, cq));
    }
    ::grpc::Status DeleteFile(::grpc::ClientContext* context, const ::filesystemcomm::DeleteFileRequest& request, ::filesystemcomm::DeleteFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filesystemcomm::DeleteFileResponse>> AsyncDeleteFile(::grpc::ClientContext* context, const ::filesystemcomm::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filesystemcomm::DeleteFileResponse>>(AsyncDeleteFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filesystemcomm::DeleteFileResponse>> PrepareAsyncDeleteFile(::grpc::ClientContext* context, const ::filesystemcomm::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filesystemcomm::DeleteFileResponse>>(PrepareAsyncDeleteFileRaw(context, request, cq));
    }
    ::grpc::Status GetFileStat(::grpc::ClientContext* context, const ::filesystemcomm::GetFileStatRequest& request, ::filesystemcomm::GetFileStatResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filesystemcomm::GetFileStatResponse>> AsyncGetFileStat(::grpc::ClientContext* context, const ::filesystemcomm::GetFileStatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filesystemcomm::GetFileStatResponse>>(AsyncGetFileStatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filesystemcomm::GetFileStatResponse>> PrepareAsyncGetFileStat(::grpc::ClientContext* context, const ::filesystemcomm::GetFileStatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filesystemcomm::GetFileStatResponse>>(PrepareAsyncGetFileStatRaw(context, request, cq));
    }
    ::grpc::Status MakeDir(::grpc::ClientContext* context, const ::filesystemcomm::MakeDirRequest& request, ::filesystemcomm::MakeDirResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filesystemcomm::MakeDirResponse>> AsyncMakeDir(::grpc::ClientContext* context, const ::filesystemcomm::MakeDirRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filesystemcomm::MakeDirResponse>>(AsyncMakeDirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filesystemcomm::MakeDirResponse>> PrepareAsyncMakeDir(::grpc::ClientContext* context, const ::filesystemcomm::MakeDirRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filesystemcomm::MakeDirResponse>>(PrepareAsyncMakeDirRaw(context, request, cq));
    }
    ::grpc::Status DeleteDir(::grpc::ClientContext* context, const ::filesystemcomm::DeleteDirRequest& request, ::filesystemcomm::DeleteDirResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filesystemcomm::DeleteDirResponse>> AsyncDeleteDir(::grpc::ClientContext* context, const ::filesystemcomm::DeleteDirRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filesystemcomm::DeleteDirResponse>>(AsyncDeleteDirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filesystemcomm::DeleteDirResponse>> PrepareAsyncDeleteDir(::grpc::ClientContext* context, const ::filesystemcomm::DeleteDirRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filesystemcomm::DeleteDirResponse>>(PrepareAsyncDeleteDirRaw(context, request, cq));
    }
    ::grpc::Status ListDir(::grpc::ClientContext* context, const ::filesystemcomm::ListDirRequest& request, ::filesystemcomm::ListDirResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filesystemcomm::ListDirResponse>> AsyncListDir(::grpc::ClientContext* context, const ::filesystemcomm::ListDirRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filesystemcomm::ListDirResponse>>(AsyncListDirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filesystemcomm::ListDirResponse>> PrepareAsyncListDir(::grpc::ClientContext* context, const ::filesystemcomm::ListDirRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filesystemcomm::ListDirResponse>>(PrepareAsyncListDirRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void OpenFile(::grpc::ClientContext* context, const ::filesystemcomm::OpenFileRequest* request, ::filesystemcomm::OpenFileResponse* response, std::function<void(::grpc::Status)>) override;
      void OpenFile(::grpc::ClientContext* context, const ::filesystemcomm::OpenFileRequest* request, ::filesystemcomm::OpenFileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CloseFile(::grpc::ClientContext* context, const ::filesystemcomm::CloseFileRequest* request, ::filesystemcomm::CloseFileResponse* response, std::function<void(::grpc::Status)>) override;
      void CloseFile(::grpc::ClientContext* context, const ::filesystemcomm::CloseFileRequest* request, ::filesystemcomm::CloseFileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReadFile(::grpc::ClientContext* context, const ::filesystemcomm::ReadFileRequest* request, ::filesystemcomm::ReadFileResponse* response, std::function<void(::grpc::Status)>) override;
      void ReadFile(::grpc::ClientContext* context, const ::filesystemcomm::ReadFileRequest* request, ::filesystemcomm::ReadFileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void WriteFile(::grpc::ClientContext* context, const ::filesystemcomm::WriteFileRequest* request, ::filesystemcomm::WriteFileResponse* response, std::function<void(::grpc::Status)>) override;
      void WriteFile(::grpc::ClientContext* context, const ::filesystemcomm::WriteFileRequest* request, ::filesystemcomm::WriteFileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateFile(::grpc::ClientContext* context, const ::filesystemcomm::CreateFileRequest* request, ::filesystemcomm::CreateFileResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateFile(::grpc::ClientContext* context, const ::filesystemcomm::CreateFileRequest* request, ::filesystemcomm::CreateFileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteFile(::grpc::ClientContext* context, const ::filesystemcomm::DeleteFileRequest* request, ::filesystemcomm::DeleteFileResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteFile(::grpc::ClientContext* context, const ::filesystemcomm::DeleteFileRequest* request, ::filesystemcomm::DeleteFileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetFileStat(::grpc::ClientContext* context, const ::filesystemcomm::GetFileStatRequest* request, ::filesystemcomm::GetFileStatResponse* response, std::function<void(::grpc::Status)>) override;
      void GetFileStat(::grpc::ClientContext* context, const ::filesystemcomm::GetFileStatRequest* request, ::filesystemcomm::GetFileStatResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void MakeDir(::grpc::ClientContext* context, const ::filesystemcomm::MakeDirRequest* request, ::filesystemcomm::MakeDirResponse* response, std::function<void(::grpc::Status)>) override;
      void MakeDir(::grpc::ClientContext* context, const ::filesystemcomm::MakeDirRequest* request, ::filesystemcomm::MakeDirResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteDir(::grpc::ClientContext* context, const ::filesystemcomm::DeleteDirRequest* request, ::filesystemcomm::DeleteDirResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteDir(::grpc::ClientContext* context, const ::filesystemcomm::DeleteDirRequest* request, ::filesystemcomm::DeleteDirResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListDir(::grpc::ClientContext* context, const ::filesystemcomm::ListDirRequest* request, ::filesystemcomm::ListDirResponse* response, std::function<void(::grpc::Status)>) override;
      void ListDir(::grpc::ClientContext* context, const ::filesystemcomm::ListDirRequest* request, ::filesystemcomm::ListDirResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::filesystemcomm::OpenFileResponse>* AsyncOpenFileRaw(::grpc::ClientContext* context, const ::filesystemcomm::OpenFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::filesystemcomm::OpenFileResponse>* PrepareAsyncOpenFileRaw(::grpc::ClientContext* context, const ::filesystemcomm::OpenFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::filesystemcomm::CloseFileResponse>* AsyncCloseFileRaw(::grpc::ClientContext* context, const ::filesystemcomm::CloseFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::filesystemcomm::CloseFileResponse>* PrepareAsyncCloseFileRaw(::grpc::ClientContext* context, const ::filesystemcomm::CloseFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::filesystemcomm::ReadFileResponse>* AsyncReadFileRaw(::grpc::ClientContext* context, const ::filesystemcomm::ReadFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::filesystemcomm::ReadFileResponse>* PrepareAsyncReadFileRaw(::grpc::ClientContext* context, const ::filesystemcomm::ReadFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::filesystemcomm::WriteFileResponse>* AsyncWriteFileRaw(::grpc::ClientContext* context, const ::filesystemcomm::WriteFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::filesystemcomm::WriteFileResponse>* PrepareAsyncWriteFileRaw(::grpc::ClientContext* context, const ::filesystemcomm::WriteFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::filesystemcomm::CreateFileResponse>* AsyncCreateFileRaw(::grpc::ClientContext* context, const ::filesystemcomm::CreateFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::filesystemcomm::CreateFileResponse>* PrepareAsyncCreateFileRaw(::grpc::ClientContext* context, const ::filesystemcomm::CreateFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::filesystemcomm::DeleteFileResponse>* AsyncDeleteFileRaw(::grpc::ClientContext* context, const ::filesystemcomm::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::filesystemcomm::DeleteFileResponse>* PrepareAsyncDeleteFileRaw(::grpc::ClientContext* context, const ::filesystemcomm::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::filesystemcomm::GetFileStatResponse>* AsyncGetFileStatRaw(::grpc::ClientContext* context, const ::filesystemcomm::GetFileStatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::filesystemcomm::GetFileStatResponse>* PrepareAsyncGetFileStatRaw(::grpc::ClientContext* context, const ::filesystemcomm::GetFileStatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::filesystemcomm::MakeDirResponse>* AsyncMakeDirRaw(::grpc::ClientContext* context, const ::filesystemcomm::MakeDirRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::filesystemcomm::MakeDirResponse>* PrepareAsyncMakeDirRaw(::grpc::ClientContext* context, const ::filesystemcomm::MakeDirRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::filesystemcomm::DeleteDirResponse>* AsyncDeleteDirRaw(::grpc::ClientContext* context, const ::filesystemcomm::DeleteDirRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::filesystemcomm::DeleteDirResponse>* PrepareAsyncDeleteDirRaw(::grpc::ClientContext* context, const ::filesystemcomm::DeleteDirRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::filesystemcomm::ListDirResponse>* AsyncListDirRaw(::grpc::ClientContext* context, const ::filesystemcomm::ListDirRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::filesystemcomm::ListDirResponse>* PrepareAsyncListDirRaw(::grpc::ClientContext* context, const ::filesystemcomm::ListDirRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_OpenFile_;
    const ::grpc::internal::RpcMethod rpcmethod_CloseFile_;
    const ::grpc::internal::RpcMethod rpcmethod_ReadFile_;
    const ::grpc::internal::RpcMethod rpcmethod_WriteFile_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateFile_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteFile_;
    const ::grpc::internal::RpcMethod rpcmethod_GetFileStat_;
    const ::grpc::internal::RpcMethod rpcmethod_MakeDir_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteDir_;
    const ::grpc::internal::RpcMethod rpcmethod_ListDir_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // File Operations
    virtual ::grpc::Status OpenFile(::grpc::ServerContext* context, const ::filesystemcomm::OpenFileRequest* request, ::filesystemcomm::OpenFileResponse* response);
    virtual ::grpc::Status CloseFile(::grpc::ServerContext* context, const ::filesystemcomm::CloseFileRequest* request, ::filesystemcomm::CloseFileResponse* response);
    virtual ::grpc::Status ReadFile(::grpc::ServerContext* context, const ::filesystemcomm::ReadFileRequest* request, ::filesystemcomm::ReadFileResponse* response);
    virtual ::grpc::Status WriteFile(::grpc::ServerContext* context, const ::filesystemcomm::WriteFileRequest* request, ::filesystemcomm::WriteFileResponse* response);
    virtual ::grpc::Status CreateFile(::grpc::ServerContext* context, const ::filesystemcomm::CreateFileRequest* request, ::filesystemcomm::CreateFileResponse* response);
    virtual ::grpc::Status DeleteFile(::grpc::ServerContext* context, const ::filesystemcomm::DeleteFileRequest* request, ::filesystemcomm::DeleteFileResponse* response);
    virtual ::grpc::Status GetFileStat(::grpc::ServerContext* context, const ::filesystemcomm::GetFileStatRequest* request, ::filesystemcomm::GetFileStatResponse* response);
    // Dir Operations
    virtual ::grpc::Status MakeDir(::grpc::ServerContext* context, const ::filesystemcomm::MakeDirRequest* request, ::filesystemcomm::MakeDirResponse* response);
    virtual ::grpc::Status DeleteDir(::grpc::ServerContext* context, const ::filesystemcomm::DeleteDirRequest* request, ::filesystemcomm::DeleteDirResponse* response);
    virtual ::grpc::Status ListDir(::grpc::ServerContext* context, const ::filesystemcomm::ListDirRequest* request, ::filesystemcomm::ListDirResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_OpenFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OpenFile() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_OpenFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenFile(::grpc::ServerContext* /*context*/, const ::filesystemcomm::OpenFileRequest* /*request*/, ::filesystemcomm::OpenFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpenFile(::grpc::ServerContext* context, ::filesystemcomm::OpenFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::filesystemcomm::OpenFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CloseFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CloseFile() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CloseFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseFile(::grpc::ServerContext* /*context*/, const ::filesystemcomm::CloseFileRequest* /*request*/, ::filesystemcomm::CloseFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseFile(::grpc::ServerContext* context, ::filesystemcomm::CloseFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::filesystemcomm::CloseFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReadFile() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ReadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadFile(::grpc::ServerContext* /*context*/, const ::filesystemcomm::ReadFileRequest* /*request*/, ::filesystemcomm::ReadFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadFile(::grpc::ServerContext* context, ::filesystemcomm::ReadFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::filesystemcomm::ReadFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WriteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_WriteFile() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_WriteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteFile(::grpc::ServerContext* /*context*/, const ::filesystemcomm::WriteFileRequest* /*request*/, ::filesystemcomm::WriteFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWriteFile(::grpc::ServerContext* context, ::filesystemcomm::WriteFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::filesystemcomm::WriteFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateFile() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_CreateFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFile(::grpc::ServerContext* /*context*/, const ::filesystemcomm::CreateFileRequest* /*request*/, ::filesystemcomm::CreateFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateFile(::grpc::ServerContext* context, ::filesystemcomm::CreateFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::filesystemcomm::CreateFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteFile() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_DeleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFile(::grpc::ServerContext* /*context*/, const ::filesystemcomm::DeleteFileRequest* /*request*/, ::filesystemcomm::DeleteFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteFile(::grpc::ServerContext* context, ::filesystemcomm::DeleteFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::filesystemcomm::DeleteFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFileStat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetFileStat() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetFileStat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileStat(::grpc::ServerContext* /*context*/, const ::filesystemcomm::GetFileStatRequest* /*request*/, ::filesystemcomm::GetFileStatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFileStat(::grpc::ServerContext* context, ::filesystemcomm::GetFileStatRequest* request, ::grpc::ServerAsyncResponseWriter< ::filesystemcomm::GetFileStatResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MakeDir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MakeDir() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_MakeDir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MakeDir(::grpc::ServerContext* /*context*/, const ::filesystemcomm::MakeDirRequest* /*request*/, ::filesystemcomm::MakeDirResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMakeDir(::grpc::ServerContext* context, ::filesystemcomm::MakeDirRequest* request, ::grpc::ServerAsyncResponseWriter< ::filesystemcomm::MakeDirResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteDir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteDir() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_DeleteDir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDir(::grpc::ServerContext* /*context*/, const ::filesystemcomm::DeleteDirRequest* /*request*/, ::filesystemcomm::DeleteDirResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteDir(::grpc::ServerContext* context, ::filesystemcomm::DeleteDirRequest* request, ::grpc::ServerAsyncResponseWriter< ::filesystemcomm::DeleteDirResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListDir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListDir() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_ListDir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDir(::grpc::ServerContext* /*context*/, const ::filesystemcomm::ListDirRequest* /*request*/, ::filesystemcomm::ListDirResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListDir(::grpc::ServerContext* context, ::filesystemcomm::ListDirRequest* request, ::grpc::ServerAsyncResponseWriter< ::filesystemcomm::ListDirResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_OpenFile<WithAsyncMethod_CloseFile<WithAsyncMethod_ReadFile<WithAsyncMethod_WriteFile<WithAsyncMethod_CreateFile<WithAsyncMethod_DeleteFile<WithAsyncMethod_GetFileStat<WithAsyncMethod_MakeDir<WithAsyncMethod_DeleteDir<WithAsyncMethod_ListDir<Service > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_OpenFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_OpenFile() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::filesystemcomm::OpenFileRequest, ::filesystemcomm::OpenFileResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::filesystemcomm::OpenFileRequest* request, ::filesystemcomm::OpenFileResponse* response) { return this->OpenFile(context, request, response); }));}
    void SetMessageAllocatorFor_OpenFile(
        ::grpc::MessageAllocator< ::filesystemcomm::OpenFileRequest, ::filesystemcomm::OpenFileResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::filesystemcomm::OpenFileRequest, ::filesystemcomm::OpenFileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_OpenFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenFile(::grpc::ServerContext* /*context*/, const ::filesystemcomm::OpenFileRequest* /*request*/, ::filesystemcomm::OpenFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OpenFile(
      ::grpc::CallbackServerContext* /*context*/, const ::filesystemcomm::OpenFileRequest* /*request*/, ::filesystemcomm::OpenFileResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CloseFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CloseFile() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::filesystemcomm::CloseFileRequest, ::filesystemcomm::CloseFileResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::filesystemcomm::CloseFileRequest* request, ::filesystemcomm::CloseFileResponse* response) { return this->CloseFile(context, request, response); }));}
    void SetMessageAllocatorFor_CloseFile(
        ::grpc::MessageAllocator< ::filesystemcomm::CloseFileRequest, ::filesystemcomm::CloseFileResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::filesystemcomm::CloseFileRequest, ::filesystemcomm::CloseFileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CloseFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseFile(::grpc::ServerContext* /*context*/, const ::filesystemcomm::CloseFileRequest* /*request*/, ::filesystemcomm::CloseFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CloseFile(
      ::grpc::CallbackServerContext* /*context*/, const ::filesystemcomm::CloseFileRequest* /*request*/, ::filesystemcomm::CloseFileResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReadFile() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::filesystemcomm::ReadFileRequest, ::filesystemcomm::ReadFileResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::filesystemcomm::ReadFileRequest* request, ::filesystemcomm::ReadFileResponse* response) { return this->ReadFile(context, request, response); }));}
    void SetMessageAllocatorFor_ReadFile(
        ::grpc::MessageAllocator< ::filesystemcomm::ReadFileRequest, ::filesystemcomm::ReadFileResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::filesystemcomm::ReadFileRequest, ::filesystemcomm::ReadFileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadFile(::grpc::ServerContext* /*context*/, const ::filesystemcomm::ReadFileRequest* /*request*/, ::filesystemcomm::ReadFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadFile(
      ::grpc::CallbackServerContext* /*context*/, const ::filesystemcomm::ReadFileRequest* /*request*/, ::filesystemcomm::ReadFileResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_WriteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_WriteFile() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::filesystemcomm::WriteFileRequest, ::filesystemcomm::WriteFileResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::filesystemcomm::WriteFileRequest* request, ::filesystemcomm::WriteFileResponse* response) { return this->WriteFile(context, request, response); }));}
    void SetMessageAllocatorFor_WriteFile(
        ::grpc::MessageAllocator< ::filesystemcomm::WriteFileRequest, ::filesystemcomm::WriteFileResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::filesystemcomm::WriteFileRequest, ::filesystemcomm::WriteFileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_WriteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteFile(::grpc::ServerContext* /*context*/, const ::filesystemcomm::WriteFileRequest* /*request*/, ::filesystemcomm::WriteFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WriteFile(
      ::grpc::CallbackServerContext* /*context*/, const ::filesystemcomm::WriteFileRequest* /*request*/, ::filesystemcomm::WriteFileResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateFile() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::filesystemcomm::CreateFileRequest, ::filesystemcomm::CreateFileResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::filesystemcomm::CreateFileRequest* request, ::filesystemcomm::CreateFileResponse* response) { return this->CreateFile(context, request, response); }));}
    void SetMessageAllocatorFor_CreateFile(
        ::grpc::MessageAllocator< ::filesystemcomm::CreateFileRequest, ::filesystemcomm::CreateFileResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::filesystemcomm::CreateFileRequest, ::filesystemcomm::CreateFileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFile(::grpc::ServerContext* /*context*/, const ::filesystemcomm::CreateFileRequest* /*request*/, ::filesystemcomm::CreateFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateFile(
      ::grpc::CallbackServerContext* /*context*/, const ::filesystemcomm::CreateFileRequest* /*request*/, ::filesystemcomm::CreateFileResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteFile() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::filesystemcomm::DeleteFileRequest, ::filesystemcomm::DeleteFileResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::filesystemcomm::DeleteFileRequest* request, ::filesystemcomm::DeleteFileResponse* response) { return this->DeleteFile(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteFile(
        ::grpc::MessageAllocator< ::filesystemcomm::DeleteFileRequest, ::filesystemcomm::DeleteFileResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::filesystemcomm::DeleteFileRequest, ::filesystemcomm::DeleteFileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFile(::grpc::ServerContext* /*context*/, const ::filesystemcomm::DeleteFileRequest* /*request*/, ::filesystemcomm::DeleteFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteFile(
      ::grpc::CallbackServerContext* /*context*/, const ::filesystemcomm::DeleteFileRequest* /*request*/, ::filesystemcomm::DeleteFileResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetFileStat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetFileStat() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::filesystemcomm::GetFileStatRequest, ::filesystemcomm::GetFileStatResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::filesystemcomm::GetFileStatRequest* request, ::filesystemcomm::GetFileStatResponse* response) { return this->GetFileStat(context, request, response); }));}
    void SetMessageAllocatorFor_GetFileStat(
        ::grpc::MessageAllocator< ::filesystemcomm::GetFileStatRequest, ::filesystemcomm::GetFileStatResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::filesystemcomm::GetFileStatRequest, ::filesystemcomm::GetFileStatResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetFileStat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileStat(::grpc::ServerContext* /*context*/, const ::filesystemcomm::GetFileStatRequest* /*request*/, ::filesystemcomm::GetFileStatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFileStat(
      ::grpc::CallbackServerContext* /*context*/, const ::filesystemcomm::GetFileStatRequest* /*request*/, ::filesystemcomm::GetFileStatResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_MakeDir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_MakeDir() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::filesystemcomm::MakeDirRequest, ::filesystemcomm::MakeDirResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::filesystemcomm::MakeDirRequest* request, ::filesystemcomm::MakeDirResponse* response) { return this->MakeDir(context, request, response); }));}
    void SetMessageAllocatorFor_MakeDir(
        ::grpc::MessageAllocator< ::filesystemcomm::MakeDirRequest, ::filesystemcomm::MakeDirResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::filesystemcomm::MakeDirRequest, ::filesystemcomm::MakeDirResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_MakeDir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MakeDir(::grpc::ServerContext* /*context*/, const ::filesystemcomm::MakeDirRequest* /*request*/, ::filesystemcomm::MakeDirResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MakeDir(
      ::grpc::CallbackServerContext* /*context*/, const ::filesystemcomm::MakeDirRequest* /*request*/, ::filesystemcomm::MakeDirResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteDir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteDir() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::filesystemcomm::DeleteDirRequest, ::filesystemcomm::DeleteDirResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::filesystemcomm::DeleteDirRequest* request, ::filesystemcomm::DeleteDirResponse* response) { return this->DeleteDir(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteDir(
        ::grpc::MessageAllocator< ::filesystemcomm::DeleteDirRequest, ::filesystemcomm::DeleteDirResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::filesystemcomm::DeleteDirRequest, ::filesystemcomm::DeleteDirResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteDir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDir(::grpc::ServerContext* /*context*/, const ::filesystemcomm::DeleteDirRequest* /*request*/, ::filesystemcomm::DeleteDirResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteDir(
      ::grpc::CallbackServerContext* /*context*/, const ::filesystemcomm::DeleteDirRequest* /*request*/, ::filesystemcomm::DeleteDirResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListDir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListDir() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::filesystemcomm::ListDirRequest, ::filesystemcomm::ListDirResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::filesystemcomm::ListDirRequest* request, ::filesystemcomm::ListDirResponse* response) { return this->ListDir(context, request, response); }));}
    void SetMessageAllocatorFor_ListDir(
        ::grpc::MessageAllocator< ::filesystemcomm::ListDirRequest, ::filesystemcomm::ListDirResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::filesystemcomm::ListDirRequest, ::filesystemcomm::ListDirResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListDir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDir(::grpc::ServerContext* /*context*/, const ::filesystemcomm::ListDirRequest* /*request*/, ::filesystemcomm::ListDirResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListDir(
      ::grpc::CallbackServerContext* /*context*/, const ::filesystemcomm::ListDirRequest* /*request*/, ::filesystemcomm::ListDirResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_OpenFile<WithCallbackMethod_CloseFile<WithCallbackMethod_ReadFile<WithCallbackMethod_WriteFile<WithCallbackMethod_CreateFile<WithCallbackMethod_DeleteFile<WithCallbackMethod_GetFileStat<WithCallbackMethod_MakeDir<WithCallbackMethod_DeleteDir<WithCallbackMethod_ListDir<Service > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_OpenFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OpenFile() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_OpenFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenFile(::grpc::ServerContext* /*context*/, const ::filesystemcomm::OpenFileRequest* /*request*/, ::filesystemcomm::OpenFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CloseFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CloseFile() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CloseFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseFile(::grpc::ServerContext* /*context*/, const ::filesystemcomm::CloseFileRequest* /*request*/, ::filesystemcomm::CloseFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReadFile() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ReadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadFile(::grpc::ServerContext* /*context*/, const ::filesystemcomm::ReadFileRequest* /*request*/, ::filesystemcomm::ReadFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WriteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_WriteFile() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_WriteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteFile(::grpc::ServerContext* /*context*/, const ::filesystemcomm::WriteFileRequest* /*request*/, ::filesystemcomm::WriteFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateFile() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_CreateFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFile(::grpc::ServerContext* /*context*/, const ::filesystemcomm::CreateFileRequest* /*request*/, ::filesystemcomm::CreateFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteFile() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_DeleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFile(::grpc::ServerContext* /*context*/, const ::filesystemcomm::DeleteFileRequest* /*request*/, ::filesystemcomm::DeleteFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFileStat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetFileStat() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetFileStat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileStat(::grpc::ServerContext* /*context*/, const ::filesystemcomm::GetFileStatRequest* /*request*/, ::filesystemcomm::GetFileStatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MakeDir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MakeDir() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_MakeDir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MakeDir(::grpc::ServerContext* /*context*/, const ::filesystemcomm::MakeDirRequest* /*request*/, ::filesystemcomm::MakeDirResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteDir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteDir() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_DeleteDir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDir(::grpc::ServerContext* /*context*/, const ::filesystemcomm::DeleteDirRequest* /*request*/, ::filesystemcomm::DeleteDirResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListDir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListDir() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_ListDir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDir(::grpc::ServerContext* /*context*/, const ::filesystemcomm::ListDirRequest* /*request*/, ::filesystemcomm::ListDirResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_OpenFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OpenFile() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_OpenFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenFile(::grpc::ServerContext* /*context*/, const ::filesystemcomm::OpenFileRequest* /*request*/, ::filesystemcomm::OpenFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpenFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CloseFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CloseFile() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CloseFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseFile(::grpc::ServerContext* /*context*/, const ::filesystemcomm::CloseFileRequest* /*request*/, ::filesystemcomm::CloseFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReadFile() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ReadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadFile(::grpc::ServerContext* /*context*/, const ::filesystemcomm::ReadFileRequest* /*request*/, ::filesystemcomm::ReadFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_WriteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_WriteFile() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_WriteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteFile(::grpc::ServerContext* /*context*/, const ::filesystemcomm::WriteFileRequest* /*request*/, ::filesystemcomm::WriteFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWriteFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateFile() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_CreateFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFile(::grpc::ServerContext* /*context*/, const ::filesystemcomm::CreateFileRequest* /*request*/, ::filesystemcomm::CreateFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteFile() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_DeleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFile(::grpc::ServerContext* /*context*/, const ::filesystemcomm::DeleteFileRequest* /*request*/, ::filesystemcomm::DeleteFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFileStat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetFileStat() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetFileStat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileStat(::grpc::ServerContext* /*context*/, const ::filesystemcomm::GetFileStatRequest* /*request*/, ::filesystemcomm::GetFileStatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFileStat(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MakeDir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MakeDir() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_MakeDir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MakeDir(::grpc::ServerContext* /*context*/, const ::filesystemcomm::MakeDirRequest* /*request*/, ::filesystemcomm::MakeDirResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMakeDir(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteDir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteDir() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_DeleteDir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDir(::grpc::ServerContext* /*context*/, const ::filesystemcomm::DeleteDirRequest* /*request*/, ::filesystemcomm::DeleteDirResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteDir(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListDir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListDir() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_ListDir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDir(::grpc::ServerContext* /*context*/, const ::filesystemcomm::ListDirRequest* /*request*/, ::filesystemcomm::ListDirResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListDir(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_OpenFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_OpenFile() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OpenFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_OpenFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenFile(::grpc::ServerContext* /*context*/, const ::filesystemcomm::OpenFileRequest* /*request*/, ::filesystemcomm::OpenFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OpenFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CloseFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CloseFile() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CloseFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_CloseFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseFile(::grpc::ServerContext* /*context*/, const ::filesystemcomm::CloseFileRequest* /*request*/, ::filesystemcomm::CloseFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CloseFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReadFile() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReadFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadFile(::grpc::ServerContext* /*context*/, const ::filesystemcomm::ReadFileRequest* /*request*/, ::filesystemcomm::ReadFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_WriteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_WriteFile() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->WriteFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_WriteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteFile(::grpc::ServerContext* /*context*/, const ::filesystemcomm::WriteFileRequest* /*request*/, ::filesystemcomm::WriteFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WriteFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateFile() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFile(::grpc::ServerContext* /*context*/, const ::filesystemcomm::CreateFileRequest* /*request*/, ::filesystemcomm::CreateFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteFile() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFile(::grpc::ServerContext* /*context*/, const ::filesystemcomm::DeleteFileRequest* /*request*/, ::filesystemcomm::DeleteFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetFileStat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetFileStat() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetFileStat(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetFileStat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileStat(::grpc::ServerContext* /*context*/, const ::filesystemcomm::GetFileStatRequest* /*request*/, ::filesystemcomm::GetFileStatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFileStat(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_MakeDir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_MakeDir() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MakeDir(context, request, response); }));
    }
    ~WithRawCallbackMethod_MakeDir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MakeDir(::grpc::ServerContext* /*context*/, const ::filesystemcomm::MakeDirRequest* /*request*/, ::filesystemcomm::MakeDirResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MakeDir(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteDir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteDir() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteDir(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteDir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDir(::grpc::ServerContext* /*context*/, const ::filesystemcomm::DeleteDirRequest* /*request*/, ::filesystemcomm::DeleteDirResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteDir(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListDir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListDir() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListDir(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListDir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDir(::grpc::ServerContext* /*context*/, const ::filesystemcomm::ListDirRequest* /*request*/, ::filesystemcomm::ListDirResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListDir(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OpenFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OpenFile() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::filesystemcomm::OpenFileRequest, ::filesystemcomm::OpenFileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::filesystemcomm::OpenFileRequest, ::filesystemcomm::OpenFileResponse>* streamer) {
                       return this->StreamedOpenFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_OpenFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OpenFile(::grpc::ServerContext* /*context*/, const ::filesystemcomm::OpenFileRequest* /*request*/, ::filesystemcomm::OpenFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOpenFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::filesystemcomm::OpenFileRequest,::filesystemcomm::OpenFileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CloseFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CloseFile() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::filesystemcomm::CloseFileRequest, ::filesystemcomm::CloseFileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::filesystemcomm::CloseFileRequest, ::filesystemcomm::CloseFileResponse>* streamer) {
                       return this->StreamedCloseFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CloseFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CloseFile(::grpc::ServerContext* /*context*/, const ::filesystemcomm::CloseFileRequest* /*request*/, ::filesystemcomm::CloseFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCloseFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::filesystemcomm::CloseFileRequest,::filesystemcomm::CloseFileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReadFile() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::filesystemcomm::ReadFileRequest, ::filesystemcomm::ReadFileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::filesystemcomm::ReadFileRequest, ::filesystemcomm::ReadFileResponse>* streamer) {
                       return this->StreamedReadFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReadFile(::grpc::ServerContext* /*context*/, const ::filesystemcomm::ReadFileRequest* /*request*/, ::filesystemcomm::ReadFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReadFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::filesystemcomm::ReadFileRequest,::filesystemcomm::ReadFileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_WriteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_WriteFile() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::filesystemcomm::WriteFileRequest, ::filesystemcomm::WriteFileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::filesystemcomm::WriteFileRequest, ::filesystemcomm::WriteFileResponse>* streamer) {
                       return this->StreamedWriteFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_WriteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WriteFile(::grpc::ServerContext* /*context*/, const ::filesystemcomm::WriteFileRequest* /*request*/, ::filesystemcomm::WriteFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWriteFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::filesystemcomm::WriteFileRequest,::filesystemcomm::WriteFileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateFile() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::filesystemcomm::CreateFileRequest, ::filesystemcomm::CreateFileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::filesystemcomm::CreateFileRequest, ::filesystemcomm::CreateFileResponse>* streamer) {
                       return this->StreamedCreateFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateFile(::grpc::ServerContext* /*context*/, const ::filesystemcomm::CreateFileRequest* /*request*/, ::filesystemcomm::CreateFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::filesystemcomm::CreateFileRequest,::filesystemcomm::CreateFileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteFile() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::filesystemcomm::DeleteFileRequest, ::filesystemcomm::DeleteFileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::filesystemcomm::DeleteFileRequest, ::filesystemcomm::DeleteFileResponse>* streamer) {
                       return this->StreamedDeleteFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteFile(::grpc::ServerContext* /*context*/, const ::filesystemcomm::DeleteFileRequest* /*request*/, ::filesystemcomm::DeleteFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::filesystemcomm::DeleteFileRequest,::filesystemcomm::DeleteFileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetFileStat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetFileStat() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::filesystemcomm::GetFileStatRequest, ::filesystemcomm::GetFileStatResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::filesystemcomm::GetFileStatRequest, ::filesystemcomm::GetFileStatResponse>* streamer) {
                       return this->StreamedGetFileStat(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetFileStat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFileStat(::grpc::ServerContext* /*context*/, const ::filesystemcomm::GetFileStatRequest* /*request*/, ::filesystemcomm::GetFileStatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetFileStat(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::filesystemcomm::GetFileStatRequest,::filesystemcomm::GetFileStatResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MakeDir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MakeDir() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::filesystemcomm::MakeDirRequest, ::filesystemcomm::MakeDirResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::filesystemcomm::MakeDirRequest, ::filesystemcomm::MakeDirResponse>* streamer) {
                       return this->StreamedMakeDir(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MakeDir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MakeDir(::grpc::ServerContext* /*context*/, const ::filesystemcomm::MakeDirRequest* /*request*/, ::filesystemcomm::MakeDirResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMakeDir(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::filesystemcomm::MakeDirRequest,::filesystemcomm::MakeDirResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteDir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteDir() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::filesystemcomm::DeleteDirRequest, ::filesystemcomm::DeleteDirResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::filesystemcomm::DeleteDirRequest, ::filesystemcomm::DeleteDirResponse>* streamer) {
                       return this->StreamedDeleteDir(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteDir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteDir(::grpc::ServerContext* /*context*/, const ::filesystemcomm::DeleteDirRequest* /*request*/, ::filesystemcomm::DeleteDirResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteDir(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::filesystemcomm::DeleteDirRequest,::filesystemcomm::DeleteDirResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListDir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListDir() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::filesystemcomm::ListDirRequest, ::filesystemcomm::ListDirResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::filesystemcomm::ListDirRequest, ::filesystemcomm::ListDirResponse>* streamer) {
                       return this->StreamedListDir(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListDir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListDir(::grpc::ServerContext* /*context*/, const ::filesystemcomm::ListDirRequest* /*request*/, ::filesystemcomm::ListDirResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListDir(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::filesystemcomm::ListDirRequest,::filesystemcomm::ListDirResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_OpenFile<WithStreamedUnaryMethod_CloseFile<WithStreamedUnaryMethod_ReadFile<WithStreamedUnaryMethod_WriteFile<WithStreamedUnaryMethod_CreateFile<WithStreamedUnaryMethod_DeleteFile<WithStreamedUnaryMethod_GetFileStat<WithStreamedUnaryMethod_MakeDir<WithStreamedUnaryMethod_DeleteDir<WithStreamedUnaryMethod_ListDir<Service > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_OpenFile<WithStreamedUnaryMethod_CloseFile<WithStreamedUnaryMethod_ReadFile<WithStreamedUnaryMethod_WriteFile<WithStreamedUnaryMethod_CreateFile<WithStreamedUnaryMethod_DeleteFile<WithStreamedUnaryMethod_GetFileStat<WithStreamedUnaryMethod_MakeDir<WithStreamedUnaryMethod_DeleteDir<WithStreamedUnaryMethod_ListDir<Service > > > > > > > > > > StreamedService;
};

}  // namespace filesystemcomm


#endif  // GRPC_filesystemcomm_2eproto__INCLUDED
