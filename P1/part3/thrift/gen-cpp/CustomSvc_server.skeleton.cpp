// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "CustomSvc.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

class CustomSvcHandler : virtual public CustomSvcIf {
 public:
  CustomSvcHandler() {
    // Your initialization goes here
  }

  void getHelloMessage(std::string& _return, const std::string& message) {
    // Your implementation goes here
    printf("getHelloMessage\n");
  }

  void AcceptInt(std::string& _return, const int32_t num) {
    // Your implementation goes here
    printf("AcceptInt\n");
  }

  void AcceptDouble(std::string& _return, const double num) {
    // Your implementation goes here
    printf("AcceptDouble\n");
  }

  void AcceptString(std::string& _return, const std::string& string_message) {
    // Your implementation goes here
    printf("AcceptString\n");
  }

  void AcceptComplexDataStructure(std::string& _return, const ComplexDataStructure& complex_data) {
    // Your implementation goes here
    printf("AcceptComplexDataStructure\n");
  }

  void AcceptClientSideStream(std::string& _return, const std::string& streaming_string) {
    // Your implementation goes here
    printf("AcceptClientSideStream\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr<CustomSvcHandler> handler(new CustomSvcHandler());
  ::std::shared_ptr<TProcessor> processor(new CustomSvcProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

