/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "rpc_measurement_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




ComplexDataStructure::~ComplexDataStructure() noexcept {
}


void ComplexDataStructure::__set_val1(const int32_t val) {
  this->val1 = val;
}

void ComplexDataStructure::__set_val2(const double val) {
  this->val2 = val;
}

void ComplexDataStructure::__set_val3(const std::string& val) {
  this->val3 = val;
}
std::ostream& operator<<(std::ostream& out, const ComplexDataStructure& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ComplexDataStructure::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->val1);
          this->__isset.val1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->val2);
          this->__isset.val2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->val3);
          this->__isset.val3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ComplexDataStructure::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ComplexDataStructure");

  xfer += oprot->writeFieldBegin("val1", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->val1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("val2", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->val2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("val3", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->val3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ComplexDataStructure &a, ComplexDataStructure &b) {
  using ::std::swap;
  swap(a.val1, b.val1);
  swap(a.val2, b.val2);
  swap(a.val3, b.val3);
  swap(a.__isset, b.__isset);
}

ComplexDataStructure::ComplexDataStructure(const ComplexDataStructure& other0) {
  val1 = other0.val1;
  val2 = other0.val2;
  val3 = other0.val3;
  __isset = other0.__isset;
}
ComplexDataStructure& ComplexDataStructure::operator=(const ComplexDataStructure& other1) {
  val1 = other1.val1;
  val2 = other1.val2;
  val3 = other1.val3;
  __isset = other1.__isset;
  return *this;
}
void ComplexDataStructure::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ComplexDataStructure(";
  out << "val1=" << to_string(val1);
  out << ", " << "val2=" << to_string(val2);
  out << ", " << "val3=" << to_string(val3);
  out << ")";
}


